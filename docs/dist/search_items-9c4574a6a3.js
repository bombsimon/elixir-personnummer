searchNodes=[{"doc":"Validate Swedish personal identity numbers Personnummer .","ref":"Personnummer.html","title":"Personnummer","type":"module"},{"doc":"Formats a personal identity number in short format. Examples iex&gt; { _ , p } = Personnummer . new ( &quot;199001011234&quot; ) iex&gt; Personnummer . format ( p ) &quot;900101-1234&quot; iex&gt; { _ , p } = Personnummer . new ( &quot;199001010001&quot; ) iex&gt; Personnummer . format ( p ) &quot;900101-0001&quot; iex&gt; { _ , p } = Personnummer . new ( &quot;199001610001&quot; ) iex&gt; Personnummer . format ( p ) &quot;900161-0001&quot;","ref":"Personnummer.html#format/1","title":"Personnummer.format/1","type":"function"},{"doc":"Formats a personal identity number in long format. Examples iex&gt; { _ , p } = Personnummer . new ( &quot;9001011234&quot; ) iex&gt; Personnummer . format ( p , true ) &quot;19900101-1234&quot; iex&gt; Personnummer . format ( p , false ) &quot;900101-1234&quot;","ref":"Personnummer.html#format/2","title":"Personnummer.format/2","type":"function"},{"doc":"Get the age of the person holding the personal identity number. Examples iex&gt; now = DateTime . utc_now ( ) iex&gt; { _ , x } = Date . new ( now . year - 20 , now . month , now . day ) iex&gt; pnr = &quot; \#{ x . year } 0101-1234&quot; iex&gt; { _ , p } = Personnummer . new ( pnr ) iex&gt; Personnummer . get_age ( p ) 20","ref":"Personnummer.html#get_age/1","title":"Personnummer.get_age/1","type":"function"},{"doc":"Returns true if the parsed personal identity number is a coordination number. Examples iex&gt; { _ , p } = Personnummer . new ( &quot;800161-3294&quot; ) iex&gt; Personnummer . is_coordination_number ( p ) true","ref":"Personnummer.html#is_coordination_number/1","title":"Personnummer.is_coordination_number/1","type":"function"},{"doc":"Returns true if the person behind the personal identity number is a female. Examples iex&gt; { _ , p } = Personnummer . new ( &quot;19090903-6600&quot; ) iex&gt; Personnummer . is_female? ( p ) true","ref":"Personnummer.html#is_female?/1","title":"Personnummer.is_female?/1","type":"function"},{"doc":"Returns true if the person behind the personal identity number is a male. Examples iex&gt; { _ , p } = Personnummer . new ( &quot;19900101-0017&quot; ) iex&gt; Personnummer . is_male? ( p ) true","ref":"Personnummer.html#is_male?/1","title":"Personnummer.is_male?/1","type":"function"},{"doc":"Calculate luhn checksum according to spec https://en.wikipedia.org/wiki/Luhn_algorithm . Examples iex&gt; Personnummer . luhn ( &quot;900101001&quot; ) 7","ref":"Personnummer.html#luhn/1","title":"Personnummer.luhn/1","type":"function"},{"doc":"Construct a new Personnummer struct. Examples iex&gt; Personnummer . new ( &quot;19900101-0017&quot; ) { :ok , % Personnummer { control : 7 , coordination : false , date : ~D[1990-01-01] , separator : &quot;-&quot; , serial : 1 } }","ref":"Personnummer.html#new/1","title":"Personnummer.new/1","type":"function"},{"doc":"Checks if the personal identity number is valid. Requres a valid date and a valid last four digits. Examples (for Persomnnummer type) iex&gt; p = % Personnummer { } iex&gt; Personnummer . valid? ( p ) false iex&gt; { _ , p } = Personnummer . new ( &quot;19900101-0017&quot; ) iex&gt; Personnummer . valid? ( p ) true iex&gt; { _ , p } = Personnummer . new ( &quot;19900101-0018&quot; ) iex&gt; Personnummer . valid? ( p ) false Examples (for string) iex&gt; Personnummer . valid? ( &quot;19900101-0017&quot; ) true iex&gt; Personnummer . valid? ( &quot;19900101-0019&quot; ) false iex&gt; Personnummer . valid? ( &quot;bogus&quot; ) false iex&gt; Personnummer . valid? ( &quot;903030-0017&quot; ) false","ref":"Personnummer.html#valid?/1","title":"Personnummer.valid?/1","type":"function"},{"doc":"Validate Swedish personal identity numbers with Elixir .","ref":"readme.html","title":"Personnummer","type":"extras"},{"doc":"Just validation iex(1)&gt; Personnummer . valid? ( &quot;19900101-0017&quot; ) true Validation and additional information iex(1)&gt; { :ok , pnr } = Personnummer . new ( &quot;19900101-0017&quot; ) { :ok , % Personnummer { control : 7 , coordination : false , date : ~D[1990-01-01] , separator : &quot;-&quot; , serial : 1 } } iex(2)&gt; Personnummer . valid? ( pnr ) true iex(3)&gt; gender = if Personnummer . is_female? ( pnr ) do &quot;female&quot; else &quot;male&quot; end &quot;male&quot; iex(4)&gt; IO . puts &quot;The person with personal identity number \#{ Personnummer . format ( pnr ) } is a \#{ gender } of age \#{ Personnummer . get_age ( pnr ) } &quot; The person with personal identity number 900101 - 0017 is a male of age 30 :ok","ref":"readme.html#usage","title":"Personnummer - Usage","type":"extras"},{"doc":"If available in Hex , the package can be installed by adding personnummer to your list of dependencies in mix.exs : def deps do [ { :personnummer , &quot;~&gt; 3.0.0&quot; } ] end Documentation can be generated with ExDoc and published on HexDocs . Once published, the docs can be found at https://hexdocs.pm/personnummer .","ref":"readme.html#installation","title":"Personnummer - Installation","type":"extras"},{"doc":"Use mix test to run doctests and unit tests.","ref":"readme.html#testing","title":"Personnummer - Testing","type":"extras"},{"doc":"Documentation can be found at bombsimon.github.io/elixir-personnummer . To generate new documentation, run mix docs -f html -o docs","ref":"readme.html#documentation","title":"Personnummer - Documentation","type":"extras"}]